name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Verify Version
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          PLUGIN_VERSION=$(./gradlew -q getPluginVersion)
          if [[ $PLUGIN_VERSION = $VERSION ]]; then exit 0 ; else exit 1; fi

      - name: Get Release Notes
        id: get_release_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          NOTES=$(awk "/## Version $VERSION/{flag=1;next}/## Version/{flag=0}flag" CHANGELOG.md)
          echo ::set-output name=NOTES::"$NOTES"

      - name: Setup GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "270.0.0"
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Build
        env:
          UNITY_USERNAME: ${{ secrets.UNITY_USERNAME }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: ./scripts/docker_run.sh

      - name: Build Docs
        run: |
          sudo apt-get install doxygen
          ./gradlew docs:build

      - name: Create Github Release
        uses: actions/create-release@v1.0.1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.get_release_notes.outputs.NOTES }}
          draft: false
          prerelease: false

      - name: Upload Asset to Github release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/urbanairship-${{ steps.get_version.outputs.VERSION }}.unitypackage
          asset_name: urbanairship-${{ steps.get_version.outputs.VERSION }}.unitypackage
          asset_content_type: application/octet-stream

      - name: Upload Docs
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          gsutil cp docs/build/$VERSION.tar.gz gs://ua-web-ci-prod-docs-transfer/libraries/unity/$VERSION.tar.gz

      - name: Bintray Release
        env:
          BINTRAY_AUTH: ${{ secrets.BINTRAY_AUTH }}
        run: bash ./scripts/deploy_bintray.sh ${{ steps.get_version.outputs.VERSION }}
